{
  "hash": "bbee58453a191caf9da54f371fee18ad",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: \n  revealjs:\n    theme: [serif, custom.scss]\n    scrollable: true\n    logo: media/chop_ri_logo.png\n    footer: Arcus Education \n    css: styles.css\n---\n\n\n\n-   Use keyboard arrow keys to\n    -   advance ( → ) and\n    -   go back ( ← )\n-   Type \"s\" to see speaker notes\n-   Type \"?\" to see other keyboard shortcuts\n\n\n\n::: {.cell}\n\n:::\n\n\n\n------------------------------------------------------------------------\n\n| Date       | Proposed Topics         |\n|--------------|---------------|\n| October 3  | Introduction to R/RStudio |\n| October 10 | Data Ingestion and Projects |\n| October 17  | Break (I have a conflict) |\n| October 24  | Data Visualization with ggplot2 |\n| October 31  | Transforming data with dplyr |\n| November 7   | Break (You have a conflict)  |\n| November 14 | Tidying data |\n| November 21   | Recap and next steps for growing in R |\n\n\n::: notes\nHere's our plan for the course.  We can adapt as we go and I learn more about pacing.\n:::\n\n## Goals for Today {.smaller}\n\nData Ingestion and Projects\n  \n  * Projects in RStudio\n  * Packages and Functions\n  * Tabular data ingestion from files\n  * File system considerations\n  * Data visualization preview\n\n\n## Projects in RStudio {.smaller}\n\n* Keeping track of your files is hard!\n* Projects allow you to keep your various efforts separated\n* They also allow you to have multiple sessions of R open that don't interfere with each other.\n\n::: notes\nIf you're like me, you might work on several different analysis projects at a time.  And if you just have one R session and are trying to work with lots of things at the same time, you can accidentally trip over yourself.  If you have two different R scripts, each of which creates the object `my_data`, or `cleaned_data`, or a similar kind of generic name, what happens when you go back and forth between these files?  You end up clobbering yourself.\n\nIt's much easier to work using Projects, in which all of your analysis and data files are stored in the same directory.  RStudio can also dedicate a session per project if you want.\n:::\n\n## Ways to Create a Project  {.smaller}\n\n::: columns\n::: {.column .small-text width=\"50%\"}\n1) Start from scratch \n2) Create a project from a directory you've already been working in\n3) Create a project from version control \n::: \n::: {.column .small-text width=\"50%\"}\n\n![](media/project_types.png)\n::: \n::: \n\n::: notes\n\n:::\n\n## Your Turn #1 {.smaller background-color=\"#e3faf1\"}\n\n* Click on File > New Project\n* Choose \"New Directory\"\n* Choose \"New Project\"\n* Choose a reasonable parent directory\n* Give your directory a name like test_project\n* Check the box that says \"open in new session\"\n* Click \"Create Project\"\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_b38a6226\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Directories and File Paths {.smaller}\n\n* Navigating file paths can be tricky\n* Projects can help\n* A few tips:\n  - `.` means \"this directory\"\n  - `..` means \"one level up from this directory\"\n  - `~` means \"my home directory\"\n* Relative path -- \"directions from here\"\n* Absolute path -- \"directions from anywhere\"\n\n[Great module on Directories and File Paths](https://liascript.github.io/course/?https://raw.githubusercontent.com/arcus/education_modules/main/directories_and_file_paths/directories_and_file_paths.md#1)\n\n## The Data Analysis Pipeline\n\n![](media/import_phase.png){.two-thirds fig-align=\"center\"}\n\n::: notes\nThe first step in the data analysis pipeline is to bring in, or **import**, the data to your environment, which for the purposes of this workshop is R.\n\nIn today's session, we'll work with a fabricated (completely made up) data set consisting of COVID-19 laboratory test results from a hypothetical infectious disease diagnostics lab. This data is stored as a **CSV file**.  Note that this data is artifically clean.  Most data doesn't come like this!\n\nOne very important thing to note is that you will need to install R packages into your copy of this project.  At first we really wanted to have all your packages pre-loaded, but now we see the wisdom of teaching you how to install and load packages right away.  It may take a few more minutes of our time today, but this is a crucial skill that you definitely need to develop.  We'll make sure to slow down and ensure that you get the packages installed that you need in order to do this work!\n\n:::\n\n## CSV\n\n![](media/csv.png)\n\n::: notes\nSo what's a .csv file? CSV stands for **comma-separated values**. When we say this aloud, we just say each letter: C - S - V.\n\nA .csv file is a plain text file, which means you can open it in a text editor and look at it. This is different than how you may have opened .csv files in the past, using Microsoft Excel or another spreadsheet program. This is an example of what raw csv data looks like when we open it in a text editor.\n\nHere we have a .csv file with the names, medical record numbers, and dates of birth for three fictional \"patients\".\n\nThis data structure is called **rectangular** or **\"tabular\"** because it falls into rows and columns, often called a table, where each row has the same number of columns, and each columns has the same number of rows.\n\nAlso note that this particular .csv file has a **header** row that instead of data, has a name for each column. .csv files often have such a header row and unless we specify otherwise, when we import this data, R assumes the first line is a header row. Not all .csv files have headers, however, so be aware that you might run across these at some point.\n:::\n\n## Tidyverse {.smaller}\n\n::: columns\n::: {.column width=\"70%\"}\n-   A consistent way to organize data\n-   Human readable, concise, consistent code\n-   Build pipelines from atomic data analysis steps\n:::\n\n::: {.column width=\"30%\"}\n![](media/tidyverse_logo.png)\n:::\n:::\n\n::: notes\nTo import our CSV data, we need some additional data analysis tools. In this course, we will be leveraging the Tidyverse.\n\nThe Tidyverse is a set of tools that has become the de facto standard for doing data science with R.\n\nThe basic tenets of \"tidy\" data analysis include: \n\n* Data should be organized in a consistent, standardized way. Each row is an observation, and each column is a variable. This is a very common way to organize data in a spreadsheet and might sound familiar from how you may already organize data in tools like Excel. \n* Programming code that acts on the data should be consistent, concise, and sound like human language as much as possible. \n* Each data analysis can be broken down into a series of atomic steps, such as \"select this column\" or \"arrange the data by the values in that column\". An arbitrarily complex data analysis can be broken down as a pipeline of atomic steps.\n:::\n\n## Installing and Loading Packages\n\n::: columns\n::: {.column .small-text width=\"50%\"}\n![](media/package.png){.half}\n:::\n\n::: {.column .small-text width=\"50%\"}\n![](media/install_load.png)\n:::\n:::\n\n::: notes\nThe **tidyverse** is package (a collection of functions, data, and help documentation) that we can use to extend the innate functionality of R, which is often referred to as \"base R\". In fact, tidyverse is special because it includes a suite of interrelated packages that work together to do a number of tasks related to importing, reshaping, visualizing, and analyzing data.\n\nYou can download and **install** a package with the command `install.packages`. For example, to install the tidyverse package, you would go to the R Console and type `install.packages(\"tidyverse\")`. Each package you want to use needs to be installed only once on each computer.\n\nMake sure you **include the quotes** around tidyverse. When to use quotes is a tricky topic that we will talk about more later in this workshop, but for now, keep in mind that you will *always* need to put quotes around the name of a package whenever using `install.packages()`.\n\nAfter you've installed the package, in order to use the functions that it provides, you also need to **load** the package into the computer's memory. This is done with the command `library`. So to enable all the functions in the \"tidyverse\" package, you type `library(\"tidyverse\")`. Packages remain loaded until you quit or restart the R program. Every time you start a new R session you have to load each package that you want to use again, and you need to put your `library` statements in the R documents that you write, preferably near the top of the file. We'll use functions within the `tidyverse` package in this workshop when we import data, so it's useful to learn about packages now.\n\nCongratulations, you've just learned your first two R commands - `install.packages` and `library`.\n\nOne of the great things about R is that there are tens of thousands of packages that are free to download and use.\n:::\n\n\n## read_csv()\n\n![](media/function_0.png){.two-thirds fig-align=\"center\"}\n\n![](media/csv_import.png){.half fig-align=\"center\"}\n\n::: notes\nWe can import CSV files using the `read_csv()` function.\n\nHere is how you use the `read_csv` function to read a CSV file into a data frame object. A data frame is a type of object that works like a spreadsheet and holds tabular (rectangular, row-and-column based) data.\n:::\n\n## Functions\n\n![](media/function_1.png){.two-thirds fig-align=\"center\"}\n\n::: notes\nThis code construct is exceedingly common in R, and it's a good moment to explain **functions**.\n\n`read_csv()` is a **function**. Functions are defined in packages. We loaded the tidyverse package to be able to use the `read_csv` function.\n\nYou may be familiar with functions from math class or perhaps also from formulas in Excel. A function takes an input, say an 'x' value, and returns an output, say a 'y' value. Functions in computer programming also take inputs and return outputs. But the inputs and outputs here are the objects that exist within the context of a programming language.\n\nFor `read_csv`, the input is the file name of a CSV file; and the output is a data frame with the contents of the file.\n:::\n\n## Functions\n\n![](media/function_2.png){.two-thirds fig-align=\"center\"}\n\n::: notes\nIn the snippet of code that reads in a csv to create a data frame, we have a **function** with an **argument** that creates an **object**.\n\nThe input that goes into a function is called an **argument**. The argument to a function gets put in parentheses.\n\nA function can have zero, one, or many arguments. If there is more than one argument, we use commas to separate them.\n:::\n\n## Functions\n\n![](media/function_3.png){.two-thirds fig-align=\"center\"}\n\n::: notes\nThe output of the `read_csv` function is a data frame object. You will usually want to *capture* that data frame inside of a named object so you can use it as the input for other functions, for example to summarize or visualize your data.\n:::\n\n## Functions\n\n![](media/function_4.png){.two-thirds fig-align=\"center\"}\n\n::: notes\nTo put the output of the `read_csv` function into a named object, we use the **assignment operator**.\n\nThe assignment operator is a less than symbol followed by a dash and resembles an arrow pointing left. Some people like to pronounce the arrow with the word \"gets.\"\n:::\n\n## read_csv()\n\n![](media/covid_csv.png){.two-thirds fig-align=\"center\"}\n\n![](media/csv_import.png){.half fig-align=\"center\"}\n\n::: notes\nLet's put these pieces together to load our covid data set.\n\nConsider this line of code. We could speak aloud the line of code above saying \"covid underscore testing gets read underscore csv of covid underscore testing dot csv\", or we could gloss over the underscores and just say \"covid testing\" and \"read csv\". When we talk with others about R, this is often what we do, so just be aware that you sometimes have to intuit underscores when someone is reading aloud or talking through a code issue.\n\nYou might notice that one of our \"covid testing\" objects is put in quotes and the other one isn't.\n\nTo be honest, quotes in R can be super confusing. A couple of rules are:\n\n-   Names of objects such as data frames don't get quotes.\n-   Literal file names are always put in quotes.\n-   When you're referring to a string value, like \"abc123\" or \"jones\", you have to use quotes.\n-   Names of packages, when you're installing especially, use quotes\n-   But in `library`, putting the package name in quotes is optional!\n\nSometimes, either quoting or not quoting works. This is one of the things where you will get a good sense but not until after some trial and error. If a line of code you're working on doesn't seem to be working as you expect, sometimes adding or removing quotes can be a good place to start when trying to figure it out.\n:::\n\n## Your Turn #2 {.smaller background-color=\"#e3faf1\"}\n\nIn your R console (the lower left pane in RStudio), enter the following:\n\n* install.packages(\"tidyverse\")\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_ebacd7d8\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">01</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}