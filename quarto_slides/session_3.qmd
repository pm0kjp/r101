---
format: 
  revealjs:
    theme: [serif, custom.scss]
    scrollable: true
    logo: media/chop_ri_logo.png
    footer: Arcus Education 
    css: styles.css
---

-   Use keyboard arrow keys to
    -   advance ( → ) and
    -   go back ( ← )
-   Type "s" to see speaker notes
-   Type "?" to see other keyboard shortcuts

```{r echo = FALSE}
library(countdown)
```

------------------------------------------------------------------------

| Date        | Proposed Topics                       |
|-------------|---------------------------------------|
| October 3   | Introduction to R/RStudio             |
| October 10  | Data Ingestion and Projects           |
| October 17  | Break (I have a conflict)             |
| October 24  | Data Visualization with ggplot2       |
| October 31  | Transforming data with dplyr          |
| November 7  | Break (You have a conflict)           |
| November 14 | Tidying data                          |
| November 21 | Recap and next steps for growing in R |

::: notes
Here's our plan for the course. We can adapt as we go and I learn more about pacing. Today I hope to talk about Data Visualization
:::

## Goals for Today {.smaller}

**Data visualization with ggplot2**

-   Go over the exercise file for last week
-   Update your exercise files using GitHub
-   ggplot2 syntax
-   Aesthetics / visuals

::: notes
Data visualization is useful because it helps you understand your data for your own exploration, and because it's generally how we communicate our research findings in an information-dense way. But first, we ended really suddenly last time and I want to make sure we go over the exercise file from last time.
:::

## Update Your Exercise Files {.smaller}

-   Open your "R 101 Exercises" project:
    -   click on the .Rproj file in that folder OR
    -   In RStudio, go to File \> Open Project in New Session
-   Update your project with my latest additions:
    -   click the "Git" button at the top
    -   choose "Pull Branches"

## Common Pitfalls {.smaller}

- You made changes to a file (and didn't "Save As" with your initials at the end)
- You still don't have all the software set up properly
- You **downloaded** the zip file instead of cloning the Git repository
- Your computer is just wonky

Please go to http://posit.cloud and make a free account and create a new project from the Git repository at https://github.com/arcus/r101_exercises

![](media/posit_new_from_github.png)

## Last Time's Exercise File {.smaller}

* In the RStudio file browser, open the Exercises folder
* Then open `session_2.qmd`
* At the very least, run the last code chunk

Any questions?  Did you actually do this, or do you want 10 minutes to do it now?

## The Data Analysis Pipeline

![](media/visualize_phase.png){.two-thirds fig-align="center"}

## Cirrhosis Data

![](media/cirrhosis_data_frame.png){width="85%" fig-align="center"}

::: notes
Let's take a look at the cirrhosis data frame.

This is what that data looks like. Go ahead and take a peek at it in your own data viewer as well.  You should have this in your Environment pane in the upper right.  Just click on the name of the object to open it in your data viewer.
:::

## Your Turn {.smaller background-color="#e3faf1"}

Consider the `cirrhosis` data frame.

What do you think a plot would look like in which:

-   The x-axis represents levels of cholesterol, stored in the `Cholesterol` variable
-   The y-axis represents the number of patients that have that cholesterol level

```{r echo = FALSE}
countdown(minutes = 0, seconds = 45)
```

::: notes
So now I'm going to ask you to imagine what the following plot would look like.

So just take a few seconds and try to visualize this graph in your mind or doodle it on a piece of paper in front of you.
:::

## Your Turn {.smaller background-color="#e3faf1"}

![](media/small_histogram.png){fig-align="center"}

What is the name of this kind of plot?

::: notes
So what I've asked you to imagine is a plot in which we have the count or the frequency of a test on the y axis, and that's broken down along the pandemic day over the x axis. Anybody know the name of that type of plot that has the count of a thing on the y axis and the distribution of those counts along the x axis?
:::


```{r echo=FALSE}
countdown(minutes = 1, seconds = 0)
```

## Today's Exercise File

* In the RStudio file browser, open the Exercises folder (if not already there)
* Then open `session_3.qmd`


------------------------------------------------------------------------

![](media/ggplot2_hex.png){.half fig-align="center"}

::: notes
We'll be using the `ggplot2` package for creating graphics. `ggplot2` is part of the tidyverse so it will get loaded when you load the tidyverse package.

`ggplot2` (and its main function, plain old `ggplot` without the 2) provides a "**grammar of graphics**" for data visualization. The idea of having a "grammar" for something is actually pretty common in R. Essentially, there should be a consistent way to build any type of "thing" in R, in this case, any type of graph. This makes it easier to learn and also easier to for humans to read the code later and make sense of it. And that's super important because most people who use R are not programmers.

The idea of the grammar of graphics is that you should be able to specify any type of graph by specifying the data that goes into it, the type of graph that you want to make, and a mapping that describes how the data should be represented as visual marks on that graph.

Having a consistent grammar means that once you learn how to make a histogram that knowledge can be applied to make a scatter plot with little extra effort. This makes it easy to generate lots of different graphs quickly which helps you understand your data more quickly.

Also, `ggplot2` graphs look great and the package can be used to generate publication-quality plots.
:::

## ggplot()


```         
ggplot(data = cirrhosis) + 
  geom_histogram(mapping = aes(x = Cholesterol))
```

::: notes
This is the ggplot code we used. Let's take a look at what this includes.

First, we always start with `ggplot()`. Notice that while the **package** is called "ggplot2", the function doesn't have the two... it's just "ggplot".

In the parentheses just after `ggplot`, we provide a data frame to start with, in this case, our `covid_testing` data frame.

We build our plot across several different layers, each one providing more information about the graphic we want, so we include a plus sign at the end of the first line to say "wait, we're not done yet!"

In the second line, we describe what kind of geometric representation we want -- a histogram, which we communicate to R using `geom_histogram()`.

We also add some mappings inside the parentheses of `geom_histogram`, explaining which data from the data frame should be displayed in the histogram. We use `aes()` (short for "aesthetic" or "aesthetic mapping") to tell ggplot how to draw the visualization.

Inside the parentheses of "aes" we specify the x-axis by including "x = variable". In this case, we write "x = pan_day". We only have to specify the **x axis**, because a histogram assumes that you're counting rows of data and will map that to the y axis.

:::

## To Make Any Graph

Step 1: Pick a tidy data frame to pass to `ggplot` as an argument

```
ggplot(data = cirrhosis)
```

::: notes
Step 1: Pick a **tidy data frame** (this contains the data you want to plot, organized in a tidy way) and add it to the first line, inside the parentheses after `ggplot`.
:::

## A Tidy Data Frame {.smaller}

::::: columns
::: {.column width="60%"}
![](media/tidy_data.png){.two-thirds fig-align="center"}
:::

::: {.column width="40%"}
A data set is tidy if:

-   Each variable is in its own column
-   Each observation is in its own row
-   Each value is in its own cell
:::
:::::

::: notes
A data set can take on a lot of different shapes with different styles of organizing data. The one method or shape that is best suited for data analysis is known as "tidy".

We won't cover "tidy" data in detail in this workshop. It's sufficient at this point to know that tidy data is in a rectangular shape with rows and columns, and:

-   Columns each measure just one thing (so, no "doubling up" with first and last name in the same column, or race and gender in the same column) and
-   Rows each constitute a single observation (like a single patient, or a single vial, or a single city block)
-   Each value is in its own cell (again, no doubling up values or merging of cells)

The sample data we're going to work with in this workshop, the `covid_testing` data, is already "tidy". So our first step is easy: we are going to choose the `covid_testing` data frame and put that as our tidy data frame.
:::

## To Make Any Graph:

* Step 1: Pick a tidy data frame to pass to `ggplot` as an argument
* Step 2: pick a "geom" function

```
ggplot(data = cirrhosis) +
  geom_histogram()
```

::: notes
Step 2 is to pick a **geom function** (this is the type of plot you want to make), and add it as a new line (like we did with `geom_histogram`)
:::

## Geom Functions

::::::: columns
::: {.column width="10%"}
![](media/geom_histogram_mini.png)
:::

::: {.column width="40%"}
`geom_histogram()`
:::

::: {.column width="10%"}
![](media/geom_dotplot_mini.png)
:::

::: {.column width="40%"}
`geom_dotplot()`
:::
:::::::

::::::: columns
::: {.column width="10%"}
![](media/geom_bar_mini.png)
:::

::: {.column width="40%"}
`geom_bar()`
:::

::: {.column width="10%"}
![](media/geom_boxplot_mini.png)
:::

::: {.column width="40%"}
`geom_boxplot()`
:::
:::::::

::::::: columns
::: {.column width="10%"}
![](media/geom_point_mini.png)
:::

::: {.column width="40%"}
`geom_point()`
:::

::: {.column width="10%"}
![](media/geom_line_mini.png)
:::

::: {.column width="40%"}
`geom_line()`
:::
:::::::

::: notes
Here are a few useful geom functions for visualizing clinical data, but there are many more. With these six you can make histograms, bar plots, scatter plots, dot plots, boxplots, and line graphs.
:::

## To Make Any Graph: 

* Step 1: Pick a tidy data frame to pass to `ggplot` as an argument
* Step 2: Pick a "geom" function
* Step 3: Write aesthetic *mappings*

```
ggplot(data = cirrhosis) +
  geom_histogram(mapping = aes(x = Cholesterol))
```
::: notes
Let's take on the third step: writing aesthetic mappings. This is where you tell R how you want the columns of the data frame represented as graphical markings on the plot. It's important to start with a very important distinction between aesthetics in general and an aesthetic mapping, which is a kind of aesthetic.
:::

## Aesthetics

![](media/aesthetics.png){.half fig-align="center"}

::: notes
-   An **aesthetic** is something that you can see about a specific data element on a graphic, such as its **position** on an x/y grid, but also other features such as for example its **color**.  If the data were to change, like you had many more male than female subjects or more acute illness, the aesthetics change.
-   An **aesthetic mapping** is a rule that tells ggplot how to visualize the data using a **specific column of the data**. These are elements that would result in a different looking visualization if you were to change the data being provided. For example, the height of a bar changes depending on the data. Maybe you might show female patients as dots of one color and male patients as dots of another color. You're **mapping** patient sex to a visible characteristic, color.

Of course, there are other visual elements of a data visualization that **wouldn't** automatically change if you change the data you provide. For instance, maybe we just like green and we want ALL the points on our graph to be green. We're not changing the color based on data, so it's not considered a mapping. When we're setting a fixed aesthetic that isn't affected by data, we don't put these assignments inside the aes parentheses.  We don't MAP those, we SET those.  

:::

## Aesthetic Mappings

![](media/abc_aesthetics.png){.half fig-align="center"}

`aes(x = a, y = b, color = c)`

::: notes
Don't worry if mapping aesthetics versus setting fixed aesthetics seems a bit fuzzy at first -- it can be tricky to grapple with, and will become clearer over time as you gain more experience manipulating visualizations in R. Even advanced coders sometimes mess this up.

Let's consider an example in a data frame with three columns, called "a", "b", and "c".\
We can imagine mapping the values in column "a", which are numerical values, to the x axis. With column "b", also numerical, we can map those values to the y axis. And for column "c", which has categorical data with "M" and "F" values, we can imagine mapping that to colors.

The mapping in ggplot would be within the aes parentheses, as you see on your screen.

Note that R automatically figures out reasonable axis limits and a color scale, but you can fine tune this manually.
:::

## Your Turn {.smaller background-color="#e3faf1"}

![](media/aesthetics.png){.half fig-align="center"}

In addition to x/y position and color, what other aesthetic **mappings** can you think of?

(Hint: things that don't change when the data changes, like the background color of a graph or the font or title of a graph, aren't **mappings**).

Type your answers in the chat!

::: notes
Okay, time to fire up the chat window again. Type into chat some examples of other aesthetic **mappings**. Keep in mind that if something is set in a fixed way and it's the same regardless of the data, that's not a mapping.
:::


## Your Turn! {.smaller background-color="#e3faf1"}

Open `session_3.qmd` if you haven't already. Work through the exercises of the section titled "Your Turn 5".

Stop when it says "Stop Here".


```{r echo=FALSE}
countdown(minutes = 5, seconds = 0)
```

::: notes
Alright, so we have another hands-on exercise here. Make sure you're in the folder called "exercises" and open the file called "session_3". Then follow the instructions. You have five minutes for this work. Have fun!

\*\* Live Coding \*\*

OK, so I'm going to do what you did. ...
:::

------------------------------------------------------------------------

![](media/blue_histogram.png){fig-align="center"}

```
ggplot(data = cirrhosis) +
  geom_histogram(mapping = aes(x = Cholesterol),
  fill = blue)
```

::: notes
Consider this plot. It's the same as the one you've created at the beginning of the session, except the bars are filled in as blue, not black. So the difference is the "fill" aesthetic.

But we're not really **mapping** the fill aesthetic to a variable here, like we just did in our hands-on coding, because all bars are the same fill color. They don't represent the values of a column (or variable) of a data frame. Instead, we're setting it to a constant value, the color blue.

Do you notice how that looks different in the code?

To do this in ggplot, you can still use "fill", but:

-   Instead of setting it equal to a column / variable like "result", you'll set it to a color, like "blue".
-   Instead of placing the "fill =" inside the aes parentheses, you'll put it outside the aes, as another argument you pass to geom_histogram.
:::

------------------------------------------------------------------------

::::: {.columns width="90%"}
::: {.column .small-text width="50%"}
![](media/multicolor_histogram.png)

```         
ggplot(data = cirrhosis) +
  geom_histogram(mapping = aes(x = Cholesterol,
                               fill = Sex))
```

[**Notice what's inside the geom_histogram():**]{.small-text}

```         
mapping = aes(x = Cholesterol, fill = Sex)
```

[**Is "fill" part of the mapping?**]{.small-text}
:::

::: {.column .small-text width="50%"}
![](media/blue_histogram.png)

```
ggplot(data = cirrhosis) +
  geom_histogram(mapping = aes(x = Cholesterol),
  fill = blue)
```

[**Notice what's inside the geom_histogram:**]{.small-text}

```         
mapping = aes(x = Cholesterol), fill = blue
```

[**Is "fill" part of the mapping?**]{.small-text}
:::
:::::

::: notes
Let's compare aesthetic mappings, which are placed inside the aes function parentheses, and fixed aesthetics, which are placed outside the aes function parenthesis but inside the geom function parentheses.

On the left we see an aesthetic mapping, where the test result is mapped to color, and on the right we see a fixed aesthetic that uses a specific color for a uniform fill.

As an aside, because of space constraints, I hit enter partway through my geom_histogram layer and started a new line. That's totally okay in R code.
:::

## Geom Functions {.section-break background-image="media/cork-board.png" background-size="400px" background-repeat="repeat"}

::: notes
We've briefly looked at geom\_ functions earlier and you might now appreciate how that makes it so easy to switch out one type of graph for another. But let's dive a bit deeper into the concept of geom functions.
:::

------------------------------------------------------------------------

::::: columns
::: {.column width="50%"}
![](media/mini_histogram.png)
:::

::: {.column width="50%"}
![](media/mini_freqpoly.png)
:::
:::::

::: notes
Consider: how are these two plots similar? How are they different?

These two graphs share the same data, plotted on the same x and y axes. What's different? What's different is that on the left, the data is shown as a histogram, and on the right, it's shown as what's called a frequency polygon. Histograms and Frequency Polygons are two examples of geoms, or geom functions.

A geom function is a function that, given the data and aesthetic mappings, generates the **geometric object** used to represent the data.

In the next exercise, you're going to work hands-on with geom functions.
:::

## Your Turn {.smaller background-color="#e3faf1"}

Return to `session_3.qmd`. Work through the rest of the document.


```{r echo=FALSE}
countdown(minutes = 5)
```

::: notes
Alright, so you're going to go back into that same file we were working with earlier, and you're going to do the second portion of the file. 

**Live Coding**


:::

## Recap {.smaller}

::::: {.columns .centered width="80%"}
::: {.column width="25%"}
![](media/ggplot2_hex.png){width="80px" fig-align="center"}
:::

::: {.column .small-text width="75%"}
**ggplot2** is a package that provides a grammar of graphics. You can create any type of plot using a simple template to which you provide:
:::
:::::

::::: {.columns .centered width="80%"}
::: {.column width="25%"}
![](media/tidy_data.png){width="200px" fig-align="center"}
:::

::: {.column .small-text width="75%"}
A **tidy data frame**, in which each variable is in its own column, each observation is in its own row, each value is in its own cell;
:::
:::::

::::: {.columns .centered width="80%"}
::: {.column width="25%"}
![](media/mini_histogram.png){width="100px"} ![](media/mini_freqpoly.png){width="100px"}
:::

::: {.column .small-text width="75%"}
A **geom function**, which tells R what kind of plot to make; and
:::
:::::

::::: {.columns .centered width="80%"}
::: {.column width="25%"}
![](media/aesthetics.png)
:::

::: {.column .small-text width="75%"}
**Aesthetic mappings**, which tell R how to represent data as graphical markings on the plot.
:::
:::::

::: notes
To recap, **ggplot2** is a package that provides a grammar of graphics. You can create any type of plot using a simple template to which you provide:

A **tidy data frame**, in which each variable is in its own column, each observation is in its own row, each value is in its own cell; A **geom function**, which tells R what kind of plot to make; and **Aesthetic mappings**, which tell R how to represent data as graphical markings on the plot.
:::
