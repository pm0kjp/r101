---
format: 
  revealjs:
    theme: [serif, custom.scss]
    scrollable: true
    logo: media/chop_ri_logo.png
    footer: Arcus Education 
    css: styles.css
---

-   Use keyboard arrow keys to
    -   advance ( → ) and
    -   go back ( ← )
-   Type "s" to see speaker notes
-   Type "?" to see other keyboard shortcuts

```{r echo = FALSE}
library(countdown)
```

## A Bit About This Series {.smaller}

Arcus has some "Skills Series" (we are starting [one in SQL](https://arcus.github.io/arcus_skill_series_sql/) next week) for the entire CHOP community.

We want to transform our 5-hour "Intro to R" workshop into one of these.  You are our test case!

::: {.columns .v-center-container}
::: {.column width="50%"}
![](media/pre_likert_reduced.png) 
:::
::: {.column width="50%"}
![](media/post_likert_reduced.png)
:::
:::

::: notes
Hi everyone, before we get into introductions, I want to explain a bit about this experience.  I and my team are data scientists who educate within the Arcus program of the Research Institute.  One of the things we do are create Skills Series, which are multi-part skill building webinars.  We have one for SQL that is very successful, and I want to do the same with R.

Previously, we taught 5-hour-long intro to R sessions a couple of times a year.  This has been an effective workshop, as the graphics on the screen show.  However, these ended up being really hard for us to put on, hard to get speakers for, and hard for people to attend!  So now what we'd like to do is transform the material from our 5-hour-long "Intro to R" into a Skills Series.

We're not quite ready yet, because I'm not sure how much to overlap from session to session, and not sure where the seams will be.  When Divya reached out to me to ask about R education, I was very excited because this is a great opportunity.  You can get a sneak preview into the latest in R education at CHOP, and I can get a group of test subjects to practice this new modality with.

There are a few differences in how I'm going to teach this time.  In the past, we used Posit.cloud, an online RStudio website, to do our instruction, because we just didn't have time to deal with helping people install R or RStudio.  Plus, we often had non-CHOP folks attend, like some colleagues at the University of Botswana, where I've done some work, or from Penn.  This time I really want to slow down and make sure you all have the right software installed in whatever environment you use to do your work, and make this very CHOP-specific.  But even though we're only a few people in this room, I am going to use slides and treat this in some ways as if it were an online webinar with hundreds of people in attendance, because that's what it will eventually become.  So forgive me if I'm speaking a lot from speaker notes or not walking around doing classroom education in a traditional way.

Also, please do me the huge favor of giving feedback about how this course is going!  It's important!

:::

## About Me {.smaller}

* Joy Payton (she/her)
* Manager of Arcus Education
* Teaching data scientist
* Interests include capacity building in global health and the use of data for political movements and social change


::: notes
OK, so about me.  My name is Joy and I use she/her pronouns.  I manage a group of data science educators in the Arcus program.  The Arcus program is an initiative of the Research Institute aimed at helping researchers deliver more reproducible, reusable research projects.  If you want more information about what Arcus is, Arcus 101 is a talk my team gives twice a month, and I'll share that link with you in the email after our session today.  Also, I have taught R and Python in English and Spanish and I have a lot of interest in the use of data science as a pro-social, de-colonizing, inclusive tool for social change, and if any of that resonates with you, we should talk later.
:::

## Tech Check and Skills Benchmarking {.smaller}


-   Do you already use R?  Not at all?  A little?  A lot?
-   What operating system are you using?  What do you use as your web browser?
-   Where do you use R and RStudio?  On your own computer? On Posit.cloud? The HPC/Respublica?  In an Arcus lab?  On VDIs?  Elsewhere?
-   What are your feelings about using R?  Excitement?  Dread?  Boredom?
-   Do you use version control like git?  Do you use CHOP's Enterprise GitHub?  Public GitHub?

-   Please complete our pre-course survey if you haven't already.

::: notes

OK, so this first session is a bit about getting to know all of you and what this group specifically needs.  Let's go through this, and I want to have everyone answer at least one or two of these bullet points.  When you share, please tell me your name, and if you want, your pronouns.

Who would like to address the first bullet point, your current use of R?

OK, what about operating systems and web browsers?

What environments do you use R or RStudio in?

What are you feeling as you start this course?  All answers are valid!

Do you use version control?  How often?

OK, so what I'd like to do now is pause.  You should have all received an email at 3:00 asking you to take a survey.  Please check your CHOP email and go ahead and answer that survey.  I'll wait until we're all done.  Take your time, don't be afraid to write ample notes in the free-response sections.
:::

## Orientation to the Course {.section-break background-image="media/cork-board.png" background-size="400px" background-repeat="repeat"}

::: notes
Great, now that we have intros squared away, let's move ahead and learn about the scope of this course.
:::

## The Data Analysis Pipeline

![](media/data_analysis_pipeline.png){.centered}

::: notes
This workshop is a gentle introduction to data science designed for healthcare professionals and researchers who don't have a background in programming. This slide shows a high-level conceptual framework of the most important steps of the data analysis process.

You always start by importing data, which isn't always easy or simple, and cleaning or "tidying" it up.  This is often where you spend 80% of your time, believe it or not!  Data can be very complex and messy, and require lots of cleaning to make it useful for analysis.

Then you start an iterative process of exploratory data analysis, which usually requires some data transformation.  Exploratory data analysis can be statistical, like understanding the mean and median value of a field, and it can be visual, like showing distributions of data.

We'll talk a lot about visualization here, but my plan, unless we decide otherwise as a group, is to not go into modeling in depth.

Finally, you need to communicate your results, whether that's sharing recruitment data with your PI or writing up your findings for publication.

We will introduce the basics of all of these steps throughout this course, with the exception of modeling, which can be an advanced topic.  If we decide that's useful, however, we can decide to include it -- the goal of this focus group is to meet your learning needs while I get to practice giving R education.
:::

------------------------------------------------------------------------

| Date       | Proposed Topics         |
|--------------|---------------|
| October 3  | Introduction to R/RStudio |
| October 10 | Data Ingestion and Projects |
| October 17  | Break (I have a conflict) |
| October 24  | Data Visualization with ggplot2 |
| October 31  | Transforming data with dplyr |
| November 7   | Break (You have a conflict)  |
| November 14 | Tidying data |
| November 21   | Recap and next steps for growing in R |


::: notes
Here's our plan for the course.  We can adapt as we go and I learn more about pacing.
:::

## Lecture Slides

![](media/slide_example.png){.two-thirds fig-align="center"}

::: notes
In general, we will introduce new concepts with lecture slides like this one. We try to illustrate the concepts in a way that makes it easier to learn how to write code. Importantly, you will have access to the slides and be able to look at them again after you leave this course.  These slides are built in R, using Quarto!  While we won't cover how to make slide deck presentations like this one in the course, you will learn how to use Quarto for your data analysis.
:::

## Timed Interactive Coding Exercises

::: {.columns .v-center-container}
::: {.column width="50%"}
![](media/your_turn_example.png)
:::

::: {.column width="50%"}
![](media/rstudio_example.png)
:::
:::

::: notes
After we present you with explanations, we'll then practice these new skills with timed interactive coding exercises. For the coding exercises, we set up a training environment on the web specifically for this course.

Please note that these exercises are timed. It's not essential that you finish each exercise, but it's essential that you try. When the time is up, I ask that everyone stop working. After each coding exercise, we will come back together, and I will live code the exercise to catch everyone up.
:::

## Code of Conduct {.smaller}

::: columns
::: {.column width="50%"}
![](media/no_harassment.png){.half fig-align="center"}
:::

::: {.column width="50%"}
![](media/no_recordings.png){.half fig-align="center"}
:::
:::

<https://arcus.github.io/intro-to-r-for-clinicians-chop/conduct.html>

::: notes
One more serious thing I need to point out that we want to provide a welcoming and supportive environment for all people, regardless of background,identity or role.  There's a code of conduct that I expect everyone to abide by, and while this might be more important to talk about in a bigger, online course, I still think it's worthwhile to mention.

I keep a strict no-harassment policy: this includes abusive, offensive, or degrading language, in writing or in voice.

We also want people to feel that they can be themselves.  If people feel like asking questions or saying that they missed a step will mean that people will tease them later or think less of them, they don't have full freedom as learners.  So please, let's be kind to one another and also be brave with being vulnerable and being forthright when we don't understand something or are confused.

For full CoC please take a look at the link I'll include in the notes for today.
:::

## Session 1: Introduction to R/RStudio {.section-break background-image="media/cork-board.png" background-size="400px" background-repeat="repeat"}


::: notes
Good afternoon, everyone!  In this session we're going to cover an introduction to R, RStudio (aka Posit), and R Markdown / Quarto.
:::

## Goals for Today {.smaller}

  * Considerations for working with R at CHOP
  * What you need for the course
  * R and RStudio
  * R Markdown and literate statistical programming
  * Learning to learn data science

## Considerations for Working with R at CHOP {.smaller}

* We work with regulated data
* IRB protocols and other regulations might override what I say here!
* You can work with R/RStudio on a CHOP device
  - You might be able to install them yourself (I can, but I have admin rights)
  - You will probably have to request an install via a [service ticket](https://chop.service-now.com/esc?id=sc_cat_item&sys_id=fbf31958db4efe00de9e782bbf96192c)

## Researchers ONLY at CHOP {.smaller}

(You'll need a cost center to refer to for most of these)
  
* If you work with the [High Performance Compute cluster](https://www.research.chop.edu/services/respublica-access-request) (HPC or Respublica), you can request an RStudio session by logging in to [Interactive Apps](https://respublica-web2.research.chop.edu/pun/sys/dashboard/batch_connect/sessions) and choosing RStudio.
* You can [request a VDI](https://www.research.chop.edu/services/beyondchopedu-access) that includes RStudio.
* You can [request an Arcus lab](https://support.arcus.chop.edu/servicedesk/customer/portal/6/create/307) for a research project, which includes RStudio.

## Possible, but not advised {.smaller}

You can use R and RStudio using online services like [https://posit.cloud](https://posit.cloud).  These can be great for learning or practice with public datasets, BUT they are not a safe or compliant place to put your regulated data.

## What you need for the course {.smaller}

What you MUST have:

* An environment with R and RStudio 

## What you need for the course {.smaller}

What I recommend you install / [get installed](https://chop.service-now.com/esc?id=sc_cat_item&sys_id=fbf31958db4efe00de9e782bbf96192c) on your own CHOP device:

* [R](https://lib.stat.cmu.edu/R/CRAN/) -- the language we use to clean, analyze, and visualize data 
* [RStudio Desktop](https://posit.co/download/rstudio-desktop/) -- an IDE for writing R 
* [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) -- version control software that will allow you to easily get the latest version of our course materials and will also be helpful for tracking changes in your own projects
* [GitHub Desktop](https://docs.github.com/en/desktop/installing-and-authenticating-to-github-desktop/installing-github-desktop) -- a helper, or "client" software that makes working with Git easier

Even though all of these software are free, you'll need a Cost Center (or grant fund) to add to your request. 

::: notes
Even though all of these software are free, you'll need a Cost Center (or grant fund) to add to your request.  Get that from your manager, administrative staff, or other leadership within your area.  There will be no charge, but DTS uses this information for tracking resource utilization.
:::

------------------------------------------------------------------------

::: {.columns .v-center-container}
::: {.column .small-text width="33%"}
![](media/r_logo.png){.two-thirds}



:::

::: {.column .small-text width="33%"}
![](media/rstudio_logo.png){.half}

:::

::: {.column .small-text width="33%"}
![](media/quarto.png)

:::
:::


::: {.columns .v-center-container}
::: {.column .small-text width="33%"}
**R** Programming language for data analysis
:::

::: {.column .small-text width="33%"}
**RStudio** Integrated development environment (IDE)
:::

::: {.column .small-text width="33%"}
**Quarto** Computational document format
:::
:::


::: notes
I'm sure you all are excited to get started programming and we will do that in the next session.

Before we do that I want to introduce you to 3 terms that may or may not be new to you.

The first is **R**. R is a statistical programming language that's great for doing data analysis. There are a lot of features that make R great:

-   R is **open source**, which means that it is "free" in two ways -- in the meaning of having **no cost** and also in that can be used widely **without intellectual property concerns or licensing restrictions**.
-   R makes it possible to **wrangle** (arrange, reshape, and organize) complex data sets, and
-   R can produce publication-quality statistical analysis and visualizations.

There is also an open and welcoming community of R users, which is just as important, if not more important, as the actual underlying details of the language.

Then, there's **RStudio**. RStudio was the original name of a company as well as the name of a piece of software the company makes (and makes available in both free and paid versions). A year ago, the company [changed its name from RStudio to Posit](https://www.rstudio.com/blog/rstudio-is-becoming-posit), but you'll still hear people call the company by its old name.

You can think of RStudio (the software) as a fancy text editor for writing R code. The technical term for a fancy text editor for writing code is "Integrated Development Environment", or IDE (you pronounce each letter, eye-dee-ee). You can run RStudio on Mac, Windows, or Linux. It can run on a local computer like your laptop, or on a server that is accessed using a web browser.

Finally there's **R Markdown**, which many people still use, and Quarto, which is an evolution of R Markdown. Quarto is a computational document format that has executable code. Quarto also includes capabilities for annotating your work which is incredibly handy and supports multiple programming languages for mixing and matching code.

R Markdown or Quarto are used to create a **computational document**, an example of [**literate programming**](https://education.arcus.chop.edu/literate-statistical-programming/). A computational document is a document that has executable code inside of it, and as we'll discuss shortly, it's a great way to perform data analysis in a reproducible fashion. You'll also hear this called "literate programming" or "literate statistical programming", because a Quarto document contains both human language (it's literate) as well as computer code (programming).

With Quarto, we will usually write that executable code using the R language. However, it's actually possible to write code in Python, C++, SQL, and other languages as well. That goes beyond the scope of this workshop, but it's helpful to remember that Quarto is quite flexible.

So we have R, Rstudio, and Quarto. For the remainder of this course, I'll show you how these tools come together to form the infrastructure for performing state of the art data analysis.

30:00
:::

## Getting Started With RStudio {.section-break background-image="media/cork-board.png" background-size="400px" background-repeat="repeat"}

::: notes
Let's look at RStudio first.
:::

## RStudio: On the Web and on Your Desktop

::: columns
::: {.column .small-text width="33%"}
![](media/posit_cloud_logo.png){.two-thirds}
![](media/rstudio_cloud.png){.two-thirds}

:::

::: {.column .small-text width="33%"}
![](media/posit_workbench_logo.png){.two-thirds}
![](media/rstudio_cloud.png){.two-thirds}
:::

::: {.column .small-text width="33%"}
![](media/rstudio_desktop.png) 

:::
:::
::: columns
::: {.column .small-text width="33%"}
**Posit.cloud**

Hosted by Posit (in the cloud)
:::

::: {.column .small-text width="33%"}
**Posit Workbench**

Hosted by you, your company, your university, on prem or in the cloud
:::

::: {.column .small-text width="33%"}
**RStudio Desktop**

Installed on your computer
:::
:::

::: notes
As I just mentioned, there are several versions of RStudio:

**Posit.Cloud** -- a version of the RStudio IDE, also now known as Posit, that can be accessed from a web browser. It's hosted on a server by Posit, the company that makes this software.

**Posit Workbench** -- a version of the RStudio IDE, also now known as Posit, that can be accessed from a web browser. It's hosted on a server that could be on premises or in the cloud.  

**RStudio Desktop** -- a version of the RStudio IDE that is installed on a personal device like your desktop or laptop. This is what you may want to use after the course to continue learning R and working on R projects. 

It's important to note that regardless of which version of RStudio that you use, you will be accessing the same general product -- there's no functionality in RStudio Server that you can't get in RStudio Desktop, or vice versa.
:::

------------------------------------------------------------------------

## Your Turn #1 {.smaller}

::: columns
::: {.column .small-text width="50%"}
* Either start up your RStudio, or

* If you don't have R and RStudio installed yet, you can create a free account at [https://posit.cloud](https://posit.cloud) and start a new project.
:::
::: {.column .small-text width="50%"}
![](media/posit_new_project.png){.two-thirds}
:::
:::

```{r echo = FALSE}
countdown(minutes = 3, seconds = 0)
```

::: notes
Now it’s your turn to either start your own RStudio or get logged into Posit.cloud .


:::


------------------------------------------------------------------------


![](media/rstudio_panes.png)

::: notes
On the top left is the **Editor**. This is where you edit your files with code in them.  You might not see this pane just yet!

On the bottom left is the **Console**. The console allows you to quickly run an individual R command that you don't need to record for reuse later, for example, installing a package. We won't use the console as much in this course.  

On the top right is the **Environment** tab set. The environment (first and most frequently used tab in the set of tabs in this pane) allows you to look at the data that's loaded into R's memory. Interacting with data in the environment tab can be a little bit like working in Excel, and we'll look at that in an upcoming exercise.

Finally, on the bottom right is where you find your **Files** and related tabs. We'll be using Quarto files for coding exercises.
:::

## Reproducible Data Analysis and R Markdown {.section-break background-image="media/cork-board.png" background-size="400px" background-repeat="repeat"}

::: notes
Now that you know a bit more about the vocabulary and computing environment we'll be using, we want to contextualize **why** you might want to use R, RStudio, and R Markdown, even though you may have worked with data before in other software.

One of the most important reasons to learn R is to improve the **reproducibility** of your research. One of the most powerful aspects of working in the R environment is that it makes it straightforward to produce **reproducible data analyses**, which will reduce risk and make "future you" much happier.
:::

## The Duke Cancer Scandal

::: columns
::: {.column .small-text width="50%"}
-   Chemo sensitivity from microarrays
-   Serious errors in data analysis
-   Clinical trials based on flawed models
-   Papers retracted, lawsuits settled
:::

::: {.column width="50%"}
![](media/duke_journals.png){.two-thirds}
:::
:::

::: notes
Consider the following case study, which highlights potential consequences of **irreproducibile** research.

In the mid-2000s, researchers at Duke University tried to use microarray gene expression data of tumor cells to predict sensitivity to chemotherapeutic agents. This approach generated a lot of excitement at the time, and the resulting work was published in high-profile journals.

Unfortunately, there were a number of **serious errors** in the data analysis.

Even more unfortunately, patients were enrolled in clinical trials and allocated based on **flawed models**. It's likely that some patients were actually treated with the chemo they are **least likely** to respond to rather than the chemo that's **most likely** to work.

In the end, 18 papers were retracted, and Duke settled more than 10 lawsuits for an undisclosed amount of money.
:::

------------------------------------------------------------------------

::: columns
::: {.column width="45%"}
**Duke**

    "1881_at"

    "31321_at"

    "31725_s_at"

    "32307_r_at"
:::

::: {.column width="45%"}
**MD Anderson**

    "1882_g_at"

    "31322_at"

    "31726_at"

    "32308_r_at"
:::
:::

Do you see the off-by-one indexing error?

::: notes
Two biostatisticians at MD Anderson uncovered these mistakes in painstaking work. Let's look at one of the errors they found.

What you see on the left are the names of are a few of the hundreds of microarray probe sets -- each roughly corresponds to a gene -- that the Duke investigators reported to predict sensitivity to 5-fluorouracil.

And on the right are the probe sets that the MD Anderson team got. You can see that they're not the same.

Can you see what went wrong?

If you look at the values long enough, you might notice a pattern: the number of the probe set that Duke reported is always one less than the number of the probe that MD Anderson found when they re-did the analysis.

This is what's called an **off-by-one indexing error**. This happens when you use a tool like Excel and accidentally miss one row; or you have one dataset that has a header and another one that doesn't. The result is that all the values in the affected column are shifted by one. This is a simple error to make, but it completely invalidates all downstream results.
:::

## "Common problems are simple...

::: small-text
Off-by-one **indexing** error

Sensitive / resistant **label reversal**

**Confounding** in experimental design

Inclusion of data from **non-reported sources**

**Wrong figure** shown
:::

... and simple problems are common."

::: notes
The off-by-one indexing error was just one of many simple errors the MD Anderson team discovered.

Another type of error that was pervasive in the study was label reversal; cell lines were labeled sensitive to a drug when they actually were resistant, and vice versa. That type of error can lead to a scenario where a patient gets the chemotherapy that would be predicted to be least beneficial.

Other problems they identified were confounding, inclusion of data from sources that were not reported in the paper, and wrong figure shown.

These are all simple errors -- people who make them aren't necessarily incompetent or negligent.

Because these errors are so easy to make and because without good documentation or a reproducible workflow it's hard to catch them, they are also very common.
:::

## Point-and-Click...

... is not reproducible!

![](media/excel_logo.png){.one-third fig-align="center"}

::: notes
A key issue in this case study is that the Duke investigators used "point and click" tools like Excel.

This prevented peers and independent investigators from catching errors in the analysis, until it was too late.

Unfortunately, the Duke case study is only one example where the barrier to reproducibility was that people used graphical user interface "point-and-click" type tools for analyzing large and complicated sets of data. Excel doesn't record user actions and because of this, is fundamentally not reproducible.
:::

## Why Bother With Reproducibility? {.smaller}

-   Can we redo the analysis with this month's data?
-   Why do the data in Table 1 not seem to agree with Figure 2?
-   Why did I decide to omit these six samples from my analysis?

Your closest collaborator is **you** from 6 months ago...

::: notes
Reproducibility doesn't only help people **outside** a study understand how things were done. They also help the initial conduct of research as well. Consider the following 3 statements and ask yourself if they sound familiar.

-   Can we redo the analysis with this month's data?
-   Why do the data in Table 1 not seem to agree with Figure 2?
-   Why did I decide to omit these six samples from my analysis?

**Your closest collaborator is you from 6 months ago...**

... but they don't answer your emails!

If you use data cleaning and data analysis scripts in R, scripts that record each step you do in code, it can be much easier to retrace your steps or rerun your entire analysis with just a couple of clicks to re-run the script. You could, for example, have a script that goes and gets the latest data directly from REDCap, removes any outliers according to pre-established rules, does some statistical tests on two groups, creates a table and data visualization, and saves all of that in a .pdf that is already formatted with the special rules of the journal you want to submit to.  You could keep collecting data via REDCap and simply re-run that script with a single click and get an updated report.  This will make your life easier in the long run, even though it means an up-front investment of writing code.

Additionally, we've already seen how irreproducibility can cause real harm to human subjects, something we all want to avoid.
:::

------------------------------------------------------------------------



![](media/quarto.png){.half fig-align="center"}

::: notes
Now that I have convinced you (I hope) that reproducibility is important, how do you undertake a reproducible analysis using the R language? One answer to this is **Quarto**, and another is the still very useful **R Markdown**.

Quarto and R Markdown allow you to write computer code mixed in with English (or other human language) narrative annotation that documents the purpose of the code and details about the decisions you made in your analysis.

Quarto, like R Markdown before it, is quickly becoming the standard for reproducible data analysis. A primary aim of this workshop is to teach you to use Quarto and to encourage you to start working it into your day to day data workflows.
:::

## Anatomy of a Quarto Document

![](media/quarto_anatomy.png){fig-align="center"}

::: notes
Quarto documents are composed of 3 basic types of building blocks.

The first is the **header** which includes information about the document, such as its title, author, and the desired output format when the document is rendered. A lot of this information is optional so a header can be pretty short, like the one we see here, or much longer.

The second type of building block is **text**. Text can include special kinds of marks (Markdown) that add styling. This includes hash marks that turn a line of text into a header, asterisks that can create italics, lines of dashes that turn into horizontal lines, and more.  Markdown is used everywhere in tech, not just in R Markdown or Quarto.  Markdown is useful to learn if you're going to use GitHub, or Python, or LaTex, or just about anything in the tech world where you're expected to write some sort of documentation.

The third is **code chunks**. Code chunks contain R code that can be executed to output results.
:::

## Running a Single Code Chunk {.smaller}

![](media/quarto_run_chunk.png){.two-thirds fig-align="center"}

Can you see the green "play" button?

That's how you run this chunk!

::: notes
So how do you execute the code in the code chunks? There are a couple of ways.

The first is to run the code in a single code chunk. And you do this by clicking the green right-pointing triangle on the top right of the chunk. This symbol looks like a "play" button. There are other symbols, too, including one that means "run all the code chunks that came before this one".
:::

## Rendering {.smaller}

You will see ("Knit"/"Preview" instead of "Render" in R Markdown documents)

::: columns
::: {.column .small-text width="62%"}
![](media/pre_render_quarto.png){.bordered}
:::

::: {.column .small-text width="32%"}
![](media/post_render_quarto.png){.bordered}
:::
:::

::: notes
The second way to execute code is to convert the entire Quarto document into HTML (or another target format). For now we'll stick to HTML because it's the default and usually what you want. This process of converting Quarto into a target format is called "rendering".

To render a document, click the button that says "Render". Then in a few moments, a rendered document will be shown.

If you are working in R Markdown, like R Notebooks, you'll see the word "Preview" or "Knit" instead. That also acts to render the Markdown.
:::

------------------------------------------------------------------------

::: columns
::: {.column .small-text width="60%"}
![](media/pre_render_detail.png){.bordered}
:::

::: {.column .small-text width="40%"}
![](media/post_render_detail.png){.bordered}
:::
:::

::: notes
Let's look at this Quarto document in a little more detail. On the slide you see the Quarto document and the resulting output in HTML that was created when this document was rendered.

I'd like to explain what each part of the markdown includes in a bit more detail.

Again, the first block is the **header** section. The line that starts with `title:` tells R Markdown that the title should be "My Markdown Document". The line starting with `format:` communicates that when the document is rendered, we want to output to be an html document. 

In the resulting HTML document there's the title "My Markdown Document" in large type letters. The header is enclosed on both sides with three dashes, and the data inside is in a format called "YAML" (spelled YAML, rhymes with Hammill). YAML, according to most people, stands for "Yet Another Markup Language", and it consists of a named field, a colon, and the value for that field.

Here we also have some narrative **text** with marks such as hash marks and asterisks. Having a hash mark at the beginning of a line makes that line a header, and the more hash marks you write, the smaller the header. Depending on where you write it, asterisks serve different functions. If you use just one asterisk at the start of a line, it makes an item in a bulleted list. If you surround text on both sides by either one or two asterisks, the text renders as either italicized or bolded, respectively. This system of using special marks to indicate how text should look is called **Markdown**.

Then we get to the code chunks. Don't worry about the contents of the code for now - in brief, the first code chunk asks R to generate 100 random values and then print out some summary statistics. The knitted document shows us our code in a gray box to make it visually distinct from the text; and then immediately after, the results of that code after it was executed. Code chunks are enclosed by three "backticks" (not single quotes), and the letter "r" enclosed in curly braces. Check out your keyboard now to see if you can find the backtick. It's likely in a corner of your keyboard, and in many layouts it travels alongside the tilde, or squiggle, symbol. The letter "r" enclosed in curly braces tells RStudio what language is being used, in our case, the R language.

The second code chunk demonstrates that (1) in addition to text output, you can also make R create graphical plots, and (2) you can tweak the behavior of a code chunk -- note that this code chunk has an option of echo as FALSE. This tells R that you don't want it to repeat, or "echo", the code in the rendered document. Notice that while the code itself is suppressed in the rendered output document, the results of the code (that is, the graph), does appear.

Now let's practice creating a Quarto document, running a code chunk, and knitting.
:::

## Your Turn #2 {.smaller background-color="#e3faf1"}

Go to File \> New File \> R Markdown Document. Click OK.

* This will give you a handy template which is used to show you a working example of a simple R Markdown document. You will be asked to provide a title and author, and you can choose any values you like, such as "Test" or "My First Markdown".
* You can choose "Source" or "Visual" at the top of the edit pane.  Try them both.  What's the difference?
* Run each code chunk by clicking the green "play" button (![](media/play.png){.inline-image height="1em"}). Note what happens.
* Knit (aka "render") the document. Type "test" and click Save to save the HTML file. Inspect the HTML document.  You might get a pop-up blocker, and if you do, just try again.

```{r}
countdown(minutes = 3, seconds = 0)
```

::: notes
It's your turn again.

Follow the instructions in Your Turn #2 to:

* create a new R Markdown document
* run all of the code chunks, and 
* render the document

When you start the document, it will ask you to fill in some information like a title, and you can add what you like.

When you render the document, it will ask you for a filename to save to -- just enter "test" as the filename, or whatever you'd like.

We will meet back in 3 minutes to review this exercise together.


**Live Coding Section** (Switch to Posit and do the exercise)

A few things to note as I go through this: the header starts with 3 dashes and ends with 3 dashes.

I want to point out that each code chunk starts with 3 backticks and "r" in curly braces, and ends with 3 backticks. RStudio helps your recognize code chunks because it makes code chunks have a gray background.

Note that we saved test.Rmd (R Markdown file) and test.html (knitted HTML file). You might wonder why you want to deal with two files. Rmd is source code document. It contains code, and to be able to use it, you need to have R installed. The Rmd file makes things reproducible and it's great to share with another data analyst or a journal. The HTML is a presentation file that you can show in any web browser. It doesn't require the user to have R installed, and it's not for running code, it's for showing your work. This is the kind of file you might share with your boss or other stakeholders who don't want to work in R or RStudio but are curious about what you did.

Can anyone tell me why is the gray code box missing in the rendered document? That's right, there's an echo=FALSE, which means "hey, please don't show this code in the final document." "Echo" here means "print what we typed". Sometimes showing your code is helpful, but sometimes it can be distracting, especially if you're using Quarto to create a report that just shows results, for example, to show your PI some information about recruitment goals. If your stakeholders don't want to see the code, but just the result of the code, use "echo = FALSE".
:::

## Homework {.smaller}

* Install / [get installed](https://chop.service-now.com/esc?id=sc_cat_item&sys_id=fbf31958db4efe00de9e782bbf96192c): [R](https://lib.stat.cmu.edu/R/CRAN/), [RStudio Desktop](https://posit.co/download/rstudio-desktop/), [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git), and [GitHub Desktop](https://docs.github.com/en/desktop/installing-and-authenticating-to-github-desktop/installing-github-desktop) 

Optional additional learning:

| Module       | Description       | Duration |
|--------------|---------------|----|
| [Learning to Learn Data Science](https://liascript.github.io/course/?https://raw.githubusercontent.com/arcus/education_modules/main/learning_to_learn/learning_to_learn.md#1) | Discover how learning data science is different than learning other subjects.| 20 mins |
| [Reproducibility, Generalizability, and Reuse](https://liascript.github.io/course/?https://raw.githubusercontent.com/arcus/education_modules/main/reproducibility/reproducibility.md#1) | This module provides learners with an approachable introduction to the concepts and impact of research reproducibility, generalizability, and data reuse, and how technical approaches can help make these goals more attainable. | 60 min |



## Next Session

Data Ingestion and Projects

  * Tabular data ingestion from files
  * Projects in R
  * File system considerations
  * Data visualization preview
  
::: notes
Topics we'll talk about next time:


:::
