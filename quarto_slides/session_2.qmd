---
format: 
  revealjs:
    theme: [serif, custom.scss]
    scrollable: true
    logo: media/chop_ri_logo.png
    footer: Arcus Education 
    css: styles.css
---

-   Use keyboard arrow keys to
    -   advance ( → ) and
    -   go back ( ← )
-   Type "s" to see speaker notes
-   Type "?" to see other keyboard shortcuts

```{r echo = FALSE}
library(countdown)
```

------------------------------------------------------------------------

| Date        | Proposed Topics                       |
|-------------|---------------------------------------|
| October 3   | Introduction to R/RStudio             |
| October 10  | Data Ingestion and Projects           |
| October 17  | Break (I have a conflict)             |
| October 24  | Data Visualization with ggplot2       |
| October 31  | Transforming data with dplyr          |
| November 7  | Break (You have a conflict)           |
| November 14 | Tidying data                          |
| November 21 | Recap and next steps for growing in R |

::: notes
Here's our plan for the course. We can adapt as we go and I learn more about pacing. Today I hope to talk about Data Ingestion and Projects!
:::

## Goals for Today {.smaller}

Data Ingestion and Projects

-   Homework check (NO PRESSURE)
-   Quarto Documents
-   Projects in RStudio
-   Packages and Functions
-   Tabular data ingestion from files
-   File system considerations
-   Data visualization preview (if time permits)


::: notes

Just a few notes about what I'm hoping to accomplish today. We'll talk briefly about last week's homework, go into what Quarto documents are, practice with RStudio projects, go over packages and functions, practice tabular data ingestion, and talk about file system considerations. If time permits, we'll also do a tiny bit of data visualization!

:::

## Homework {.smaller}

-   Install / [get installed](https://chop.service-now.com/esc?id=sc_cat_item&sys_id=fbf31958db4efe00de9e782bbf96192c): [R](https://lib.stat.cmu.edu/R/CRAN/), [RStudio Desktop](https://posit.co/download/rstudio-desktop/), [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git), and [GitHub Desktop](https://docs.github.com/en/desktop/installing-and-authenticating-to-github-desktop/installing-github-desktop)

Optional additional learning:

| Module | Description | Duration |
|---------------------------|-----------------------------|----------------|
| [Learning to Learn Data Science](https://liascript.github.io/course/?https://raw.githubusercontent.com/arcus/education_modules/main/learning_to_learn/learning_to_learn.md#1) | Discover how learning data science is different than learning other subjects. | 20 mins |
| [Reproducibility, Generalizability, and Reuse](https://liascript.github.io/course/?https://raw.githubusercontent.com/arcus/education_modules/main/reproducibility/reproducibility.md#1) | This module provides learners with an approachable introduction to the concepts and impact of research reproducibility, generalizability, and data reuse, and how technical approaches can help make these goals more attainable. | 60 min |

::: notes
OK, did folks get R, RStudio, git, and GitHub desktop installed?

Also, did anyone do either of the optional assignments? Were they helpful?
:::

## Why Bother With Reproducibility? {.smaller}

-   Can we redo the analysis with this month's data?
-   Why do the data in Table 1 not seem to agree with Figure 2?
-   Why did I decide to omit these six samples from my analysis?

Your closest collaborator is **you** from 6 months ago...

::: notes
We ended on this slide last time, and so just to recap:

If you use data cleaning and data analysis scripts in R, scripts that record each step you do in code, it can be much easier to retrace your steps or rerun your entire analysis with just a couple of clicks to re-run the script. You could, for example, have a script that goes and gets the latest data directly from REDCap, removes any outliers according to pre-established rules, does some statistical tests on two groups, creates a table and data visualization, and saves all of that in a .pdf that is already formatted with the special rules of the journal you want to submit to. You could keep collecting data via REDCap and simply re-run that script with a single click and get an updated report. This will make your life easier in the long run, even though it means an up-front investment of writing code.
:::

------------------------------------------------------------------------

![](media/quarto.png){.half fig-align="center"}

::: notes
Quarto and R Markdown allow you to write computer code mixed in with English (or other human language) narrative annotation that documents the purpose of the code and details about the decisions you made in your analysis.

Quarto, like R Markdown before it, is quickly becoming the standard for reproducible data analysis. A primary aim of this workshop is to teach you to use Quarto and to encourage you to start working it into your day to day data workflows.
:::

## Anatomy of a Quarto Document

![](media/quarto_anatomy.png){fig-align="center"}

::: notes
Quarto documents are composed of 3 basic types of building blocks.

The first is the **header** which includes information about the document, such as its title, author, and the desired output format when the document is rendered. A lot of this information is optional so a header can be pretty short, like the one we see here, or much longer.

The second type of building block is **text**. Text can include special kinds of marks (Markdown) that add styling. This includes hash marks that turn a line of text into a header, asterisks that can create italics, lines of dashes that turn into horizontal lines, and more. Markdown is used everywhere in tech, not just in R Markdown or Quarto. Markdown is useful to learn if you're going to use GitHub, or Python, or LaTex, or just about anything in the tech world where you're expected to write some sort of documentation.

The third is **code chunks**. Code chunks contain R code that can be executed to output results.
:::

## Running a Single Code Chunk {.smaller}

![](media/quarto_run_chunk.png){.two-thirds fig-align="center"}

Can you see the green "play" button?

That's how you run this chunk!

::: notes
So how do you execute the code in the code chunks? There are a couple of ways.

The first is to run the code in a single code chunk. And you do this by clicking the green right-pointing triangle on the top right of the chunk. This symbol looks like a "play" button. There are other symbols, too, including one that means "run all the code chunks that came before this one".
:::

## Rendering {.smaller}

You will see ("Knit"/"Preview" instead of "Render" in R Markdown documents)

::::: columns
::: {.column .small-text width="60%"}
![](media/pre_render_quarto.png){.bordered}
:::

::: {.column .small-text width="30%"}
![](media/post_render_quarto.png){.bordered}
:::
:::::

::: notes
The second way to execute code is to convert the entire Quarto document into HTML (or another target format). For now we'll stick to HTML because it's the default and usually what you want. This process of converting Quarto into a target format is called "rendering".

To render a document, click the button that says "Render". Then in a few moments, a rendered document will be shown.

If you are working in R Markdown, like R Notebooks, you'll see the word "Preview" or "Knit" instead. That also acts to render the Markdown.
:::

------------------------------------------------------------------------

::::: columns
::: {.column .small-text width="60%"}
![](media/pre_render_detail.png){.bordered}
:::

::: {.column .small-text width="40%"}
![](media/post_render_detail.png){.bordered}
:::
:::::

::: notes
Let's look at this Quarto document in a little more detail. On the slide you see the Quarto document and the resulting output in HTML that was created when this document was rendered.

I'd like to explain what each part of the markdown includes in a bit more detail.

Again, the first block is the **header** section. The line that starts with `title:` tells R Markdown that the title should be "My Markdown Document". The line starting with `format:` communicates that when the document is rendered, we want to output to be an html document.

In the resulting HTML document there's the title "My Markdown Document" in large type letters. The header is enclosed on both sides with three dashes, and the data inside is in a format called "YAML". YAML, according to most people, stands for "Yet Another Markup Language", and it consists of a named field, a colon, and the value for that field.

Here we also have some narrative **text** with marks such as hash marks and asterisks. Having a hash mark at the beginning of a line makes that line a header, and the more hash marks you write, the smaller the header. Depending on where you write it, asterisks serve different functions. If you use just one asterisk at the start of a line, it makes an item in a bulleted list. If you surround text on both sides by either one or two asterisks, the text renders as either italicized or bolded, respectively. This system of using special marks to indicate how text should look is called **Markdown**.

Then we get to the code chunks. Don't worry about the contents of the code for now - in brief, the first code chunk asks R to generate 100 random values and then print out some summary statistics. The knitted document shows us our code in a gray box to make it visually distinct from the text; and then immediately after, the results of that code after it was executed. Code chunks are enclosed by three "backticks" (not single quotes), and the letter "r" enclosed in curly braces. Check out your keyboard now to see if you can find the backtick. It's likely in a corner of your keyboard, and in many layouts it travels alongside the tilde, or squiggle, symbol. The letter "r" enclosed in curly braces tells RStudio what language is being used, in our case, the R language.

The second code chunk demonstrates that (1) in addition to text output, you can also make R create graphical plots, and (2) you can tweak the behavior of a code chunk -- note that this code chunk has an option of echo as FALSE. This tells R that you don't want it to repeat, or "echo", the code in the rendered document. Notice that while the code itself is suppressed in the rendered output document, the results of the code (that is, the graph), does appear.

Now let's practice creating a Quarto document, running a code chunk, and knitting.
:::

## Your Turn #1 {.smaller background-color="#e3faf1"}

Go to File \> New File \> R Markdown Document. Click OK.

-   This will give you a handy template which is used to show you a working example of a simple R Markdown document. You will be asked to provide a title and author, and you can choose any values you like, such as "Test" or "My First Markdown".
-   You can choose "Source" or "Visual" at the top of the edit pane. Try them both. What's the difference?
-   Run each code chunk by clicking the green "play" button (![](media/play.png){.inline-image height="1em"}). Note what happens.
-   Knit (aka "render") the document. Type "test" and click Save to save the HTML file. Inspect the HTML document. You might get a pop-up blocker, and if you do, just try again.

```{r}
countdown(minutes = 3, seconds = 0)
```

::: notes
It's your turn again.

Follow the instructions here to:

-   create a new R Markdown document
-   run all of the code chunks, and
-   render the document

When you start the document, it will ask you to fill in some information like a title, and you can add what you like.

When you render the document, it will ask you for a filename to save to -- just enter "test" as the filename, or whatever you'd like.

We will meet back in 3 minutes to review this exercise together.

**Live Coding Section** (Switch to R and do the exercise)

A few things to note as I go through this: the header starts with 3 dashes and ends with 3 dashes.

I want to point out that each code chunk starts with 3 backticks and "r" in curly braces, and ends with 3 backticks. RStudio helps your recognize code chunks because it makes code chunks have a gray background.

Note that we saved test.Rmd (R Markdown file) and test.html (knitted HTML file). You might wonder why you want to deal with two files. Rmd is source code document. It contains code, and to be able to use it, you need to have R installed. The Rmd file makes things reproducible and it's great to share with another data analyst or a journal. The HTML is a presentation file that you can show in any web browser. It doesn't require the user to have R installed, and it's not for running code, it's for showing your work. This is the kind of file you might share with your boss or other stakeholders who don't want to work in R or RStudio but are curious about what you did.

Can anyone tell me why is the gray code box missing in the rendered document? That's right, there's an echo=FALSE, which means "hey, please don't show this code in the final document." "Echo" here means "print what we typed". Sometimes showing your code is helpful, but sometimes it can be distracting, especially if you're using Quarto to create a report that just shows results, for example, to show your PI some information about recruitment goals. If your stakeholders don't want to see the code, but just the result of the code, use "echo = FALSE".
:::

## Projects in RStudio {.smaller}

-   Keeping track of your files is hard!
-   Projects allow you to keep your various efforts separated
-   They also allow you to have multiple sessions of R open that don't interfere with each other.

::: notes
If you're like me, you might work on several different analysis projects at a time. And if you just have one R session and are trying to work with lots of things at the same time, you can accidentally trip over yourself. If you have two different R scripts, each of which creates the object `my_data`, or `cleaned_data`, or a similar kind of generic name, what happens when you go back and forth between these files? You end up clobbering yourself.

It's much easier to work using Projects, in which all of your analysis and data files are stored in the same directory. RStudio can also dedicate a session per project if you want.
:::

## Ways to Create a Project {.smaller}

::::: columns
::: {.column .small-text width="50%"}
1)  Start from scratch
2)  Create a project from a directory you've already been working in
3)  Create a project from version control
:::

::: {.column .small-text width="50%"}
![](media/project_types.png)
:::
:::::

::: notes
There are three ways to create new projects, and we'll do two of those together. You can start from scratch, which we'll do in the next slide, or you can create a project in a directory that already exists, or you can create a new file from a version control project, which we'll do in a few minutes.
:::

## Your Turn #2 {.smaller background-color="#e3faf1"}

-   Click on File \> New Project
-   Choose "New Directory"
-   Choose "New Project"
-   Choose a reasonable parent directory
-   Give your directory a name like test_project
-   Check the box that says "open in new session"
-   Click "Create Project"

```{r echo=FALSE}
countdown(minutes = 3, seconds = 0)
```

::: notes
Okay, so here we are creating a new project and opening it in a new session. It's very important to use the "open in new session" checkbox. Please do this, it should only take you a minute or so. Please leave this session open, because I'd like for you to have more than one R session open today.

I'll let you read this and do the steps... please go ahead and create a new project. If you have issues, just throw up a hand or come off mute.
:::

## Directories and File Paths {.smaller}

-   Navigating file paths can be tricky
-   Projects can help
-   A few tips:
    -   `.` means "this directory"
    -   `..` means "one level up from this directory"
    -   `~` means "my home directory"
    -   `/` as the first symbol means "start at the root"
-   Relative path -- "directions from here"
-   Absolute path -- "directions from anywhere"
-   Working directory -- R's "starting place"

[Great module on Directories and File Paths](https://liascript.github.io/course/?https://raw.githubusercontent.com/arcus/education_modules/main/directories_and_file_paths/directories_and_file_paths.md#1)

::: notes
OK, so one of the dirty little secrets of learning data analysis is that one of the biggest challenges some people have, especially if they've never worked in the command line, is finding their own files. They know they downloaded it, or they double clicked on a .csv file attachment in Outlook and they're not sure where that file lives. OR, you send your analysis file to someone, but the path in your analysis file doesn't match the path in their computer to the data they want to analyze, and it's a huge issue to explain to them how to fix the issue.

I won't go into file paths in depth here, but I do want to assert that navigating file paths can be tricky. My recommendation is that if you're working with data that exists in files (like a .csv of data), you move that data to be inside a directory that is close to where your analysis scripts are. This is one way RStudio projects can help. Keep your data and your analysis scripts within your project, so you know where things are.

Also, just a bit of explanation for writing file paths. Windows is a weird operating system and is unlike the rest of the world's major operating systems (Unix, Linux, Mac) in how it does file paths. Most file paths use forward slashes, not backward slashes.

And a few aliases are useful to know. A single dot means "this directory", two dots means "go up one layer to the directory that holds this one, and a tilde means "my home directory", which will differ from user to user on a shared system like a server. Finally, if you have a path that starts with a slash, it means "go to the root, the directory that holds all other directories on this computer."

In your analysis scripts, you'll often have to decide if you want to use a relative path or an absolute path to tell R where a file is. There are advantages and disadvantages to both.

A relative path assumes that we're starting in the same place. So if I was at home, describing where my ergonomic keyboard is, I'd say "go upstairs to the second floor, and then on the street side of the house, there's my office. Then go inside and you'll find the keyboard on my desk."

But if you're NOT in my house, you're in your house, which doesn't have a second floor, you would say, "hey, your directions to go to the second floor don't make sense." A relative path doesn't work when we're not starting in the same place. And that brings us to the idea of a working directory. Any time you are working in R, it's running with a starting point, its working directory. And you might go open up an R script that's in a totally different starting point. The great thing about RStudio projects is that when you open a project, R automatically makes the working directory that project directory.

An absolute path is a path that includes enough detail so that the location is clear from anywhere in the computer. For example, an absolute path would be if I said, "go to 123 Main Street, Philadelphia, go inside, go to the second floor, go to the street side, open the door, go inside, and look on the desk. The keyboard is there."
:::

## The Data Analysis Pipeline

![](media/import_phase.png){.two-thirds fig-align="center"}

::: notes
The first step in the data analysis pipeline is to bring in, or **import**, the data to your environment. And we've already talked about how locating files that contain data can be tricky. One simple way to make this a bit easier is to use RStudio projects, which create directories that hold all your materials related to an analysis task or project. Later I'll have you create a new project from a version control source, so that you have exercise and solutions files for our work together in this course.

To start, we'll work with a fabricated (completely made up) data set consisting of COVID-19 laboratory test results from a hypothetical infectious disease diagnostics lab. This data is stored as a **CSV file**. Note that this data is artifically clean. Most data doesn't come like this, perfectly groomed with no missingness, no mispellings, and no problems. Most data needs at least a little massaging to be able to be usable, so I want to set the expectation that what we do with a beautifully groomed .csv is unrealistic in most cases. Later on in the course we'll deal with more realistic data, that has problems and issues, and we'll talk about how to handle those issues.

One very important thing to note is that you will need to install R packages into your copy of this project. At first we really wanted to have all your packages pre-loaded, but now we see the wisdom of teaching you how to install and load packages right away. It may take a few more minutes of our time today, but this is a crucial skill that you definitely need to develop. We'll make sure to slow down and ensure that you get the packages installed that you need in order to do this work!
:::

## CSV

![](media/csv.png)

::: notes
So what's a .csv file? CSV stands for **comma-separated values**. When we say this aloud, we just say each letter: C - S - V.

A .csv file is a plain text file, which means you can open it in a text editor and look at it. This is different than how you may have opened .csv files in the past, using Microsoft Excel or another spreadsheet program. This is an example of what raw csv data looks like when we open it in a text editor.

Here we have a .csv file with the names, medical record numbers, and dates of birth for three fictional "patients".

This data structure is called **rectangular** or **"tabular"** because it falls into rows and columns, often called a table, where each row has the same number of columns, and each columns has the same number of rows.

Also note that this particular .csv file has a **header** row that instead of data, has a name for each column. .csv files often have such a header row and unless we specify otherwise, when we import this data, R assumes the first line is a header row. Not all .csv files have headers, however, so be aware that you might run across these at some point.
:::

## Tidyverse {.smaller}

::::: columns
::: {.column width="70%"}
-   A consistent way to organize data
-   Human readable, concise, consistent code
-   Build pipelines from atomic data analysis steps
:::

::: {.column width="30%"}
![](media/tidyverse_logo.png)
:::
:::::

::: notes
To import our CSV data, we need some additional data analysis tools. In this course, we will be leveraging the Tidyverse.

The Tidyverse is a set of tools that has become the de facto standard for doing data science with R.

The basic tenets of "tidy" data analysis include:

-   Data should be organized in a consistent, standardized way. Each row is an observation, and each column is a variable. This is a very common way to organize data in a spreadsheet and might sound familiar from how you may already organize data in tools like Excel.
-   Programming code that acts on the data should be consistent, concise, and sound like human language as much as possible.
-   Each data analysis can be broken down into a series of atomic steps, such as "select this column" or "arrange the data by the values in that column". An arbitrarily complex data analysis can be broken down as a pipeline of atomic steps.
:::

## Your Turn #3 {.smaller background-color="#e3faf1"}

In your R console (the lower left pane in RStudio), in any session (it doesn't matter which one you use), enter the following:

-   `install.packages("tidyverse")`

```{r echo=FALSE}
countdown(minutes = 1, seconds = 0)
```

::: notes
We'll talk about this command in the next few slides, but for now I want you to just run this line of code. It doesn't matter if you've already done it, it won't hurt anything to re-install.
:::

## Installing and Loading Packages

::::: columns
::: {.column .small-text width="50%"}
![](media/package.png){.half}
:::

::: {.column .small-text width="50%"}
![](media/install_load.png)
:::
:::::

::: notes
The **tidyverse** is package (a collection of functions, data, and help documentation) that we can use to extend the innate functionality of R, which is often referred to as "base R". In fact, tidyverse is special because it includes a suite of interrelated packages that work together to do a number of tasks related to importing, reshaping, visualizing, and analyzing data.

You can download and **install** a package with the command `install.packages`. For example, to install the tidyverse package, you would go to the R Console and type `install.packages("tidyverse")`. Each package you want to use needs to be installed only once on each computer.

Make sure you **include the quotes** around tidyverse. When to use quotes is a tricky topic that we will talk about more later in this workshop, but for now, keep in mind that you will *always* need to put quotes around the name of a package whenever using `install.packages()`.

After you've installed the package, in order to use the functions that it provides, you also need to **load** the package into the computer's memory. This is done with the command `library`. So to enable all the functions in the "tidyverse" package, you type `library("tidyverse")`. Packages remain loaded until you quit or restart the R program. Every time you start a new R session you have to load each package that you want to use again, and you need to put your `library` statements in the R documents that you write, preferably near the top of the file. We'll use functions within the `tidyverse` package in this workshop when we import data, so it's useful to learn about packages now.

Congratulations, you've just learned your first two R commands - `install.packages` and `library`.

One of the great things about R is that there are tens of thousands of packages that are free to download and use and extend the usefulness of base R.
:::

## read_csv()

![](media/function_0.png){.two-thirds fig-align="center"}

![](media/csv_import.png){.half fig-align="center"}

::: notes
We can import CSV files using the `read_csv()` function.

Here is how you use the `read_csv` function to read a CSV file into a data frame object. A data frame is a type of object that works like a spreadsheet and holds tabular (rectangular, row-and-column based) data.
:::

## Functions

![](media/function_1.png){.two-thirds fig-align="center"}

::: notes
This code construct is exceedingly common in R, and it's a good moment to explain **functions**.

`read_csv()` is a **function**. Functions are defined in packages. We loaded the tidyverse package to be able to use the `read_csv` function.

You may be familiar with functions from math class or perhaps also from formulas in Excel. A function takes an input, say an 'x' value, and returns an output, say a 'y' value. Functions in computer programming also take inputs and return outputs. But the inputs and outputs here are the objects that exist within the context of a programming language.

For `read_csv`, the input is the file name of a CSV file; and the output is a data frame with the contents of the file.
:::

## Functions

![](media/function_2.png){.two-thirds fig-align="center"}

::: notes
In the snippet of code that reads in a csv to create a data frame, we have a **function** with an **argument** that creates an **object**.

The input that goes into a function is called an **argument**. The argument to a function gets put in parentheses.

A function can have zero, one, or many arguments. If there is more than one argument, we use commas to separate them.
:::

## Functions

![](media/function_3.png){.two-thirds fig-align="center"}

::: notes
The output of the `read_csv` function is a data frame object. You will usually want to *capture* that data frame inside of a named object so you can use it as the input for other functions, for example to summarize or visualize your data.
:::

## Functions

![](media/function_4.png){.two-thirds fig-align="center"}

::: notes
To put the output of the `read_csv` function into a named object, we use the **assignment operator**.

The assignment operator is a less than symbol followed by a dash and resembles an arrow pointing left. Some people like to pronounce the arrow with the word "gets."
:::

## read_csv()

![](media/covid_csv.png){.two-thirds fig-align="center"}

![](media/csv_import.png){.half fig-align="center"}

::: notes
Let's put these pieces together to load our covid data set.

Consider this line of code. We could speak aloud the line of code above saying "covid underscore testing gets read underscore csv of covid underscore testing dot csv", or we could gloss over the underscores and just say "covid testing" and "read csv". When we talk with others about R, this is often what we do, so just be aware that you sometimes have to intuit underscores when someone is reading aloud or talking through a code issue.

You might notice that one of our "covid testing" objects is put in quotes and the other one isn't.

To be honest, quotes in R can be super confusing. A couple of rules are:

-   Names of objects such as data frames don't get quotes.
-   Literal file names are always put in quotes.
-   When you're referring to a string value, like "abc123" or "jones", you have to use quotes.
-   Names of packages, when you're installing especially, use quotes
-   But in `library`, putting the package name in quotes is optional!

Sometimes, either quoting or not quoting works. This is one of the things where you will get a good sense but not until after some trial and error. If a line of code you're working on doesn't seem to be working as you expect, sometimes adding or removing quotes can be a good place to start when trying to figure it out.
:::

## Your Turn #4 {.smaller background-color="#e3faf1"}

Part 1: Now you're going to open a new project using version control.

::::: columns
::: {.column .small-text width="50%"}
If you have git installed:

-   Click on File \> New Project
-   Choose "Version Control"
-   Choose Git

\[This is where you might have issues, if you don't have git installed...\]
:::

::: {.column .small-text width="50%"}
![](media/rstudio_clone_git.png)
:::
:::::

```{r echo=FALSE}
countdown(minutes = 1, seconds = 0)
```

::: notes
OK, so this is only one part of our Your Turn number 5. This should only take you about a minute, and hopefully you get to a screen that looks like the image shown.
:::

## Your Turn #4 {.smaller background-color="#e3faf1"}

Part 2: Clone the project exercises!

-   Add this url as the "Repository URL": <https://github.com/arcus/r101_exercises.git>
-   Optionally, add a directory name (default will be r101_exercises)
-   Optionally, change the parent directory
-   Click "open in new session" box
-   Click "Create Project"

```{r echo=FALSE}
countdown(minutes = 3, seconds = 0)
```

## Your Turn #4 {.smaller background-color="#e3faf1"}

Part 3: Don't have git installed? You'll need to download a zip file.

-   Go to <https://github.com/arcus/r101_exercises>
-   Find the green "Code" button and click on it
-   Download the zip file and put it somewhere useful
-   Open the zip file
-   Click on File \> New Project
-   Choose "Existing Directory"
-   Browse to find that r101_exercises directory
-   Check "Open in new session" box
-   Click "Create Project"

## Your Turn #5 {.smaller background-color="#e3faf1"}

In the Files pane, click on the folder `exercises`.

Open the file titled `session_2.qmd`. Instructions for this exercise are in the text of the document.

If you make changes to this file (like write answers to the questions), save your changes to a new file, session_2_nn.qmd, where nn = your name or initials.


```{r} 
countdown(minutes = 5, seconds = 0)
```

::: notes
I want you to go into the project for r101 exercises. You'll go into the folder called "exercises" and find the assignment called session_2.qmd. Go ahead and open that, and read the rest of the instructions there.

We'll give you five minutes for this, and when you're done, if you've made changes, save your file as session_2_nn.qmd (where nn = your initials).

We do this so that if I update or make changes to session_2.qmd, and you update your files using git, my changes won't overwrite your work.

**After the timer finishes, do the exercise live so they can see what it looks like...**

I'm going to start by running this code chunk. I can go to the "Run" button at the top right of the Source pane, or I can click the "run" or "play" button on top of the chunk.

When I'm coding, I like to break my code up into chunks of only a few lines of code at a time. That way, if I have to make a change, it's easy to just run the code I need to re-run, without re-running the whole thing.

Now, did anything change when I ran this chunk that ingests data from a .csv? Yes! In the environment pane, a new data object appeared. And I can interact with this object in several ways. I can click the triangle beside the object's name, or I can click on the object name itself.

So, let's answer the questions. How can I tell how many rows and columns there are? I can look beside the name of the object in my Environment pane and I see a number of observations, which are rows, and a number of variables, which are columns. I can also use the data view that opens up in my source pane here. At the very bottom there's a count of rows and columns. Did anyone else figure out the answer in a different way?

What about question two? Any ideas? Well, remember that we want our data analysis to be reproducible, so everything we do to the data is written in code. Changing data using point and click isn't reproducible. That's an important reason why R doesn't have a data editing feature using point and click.

Does anyone want to put in their answer for number 3? \[Correct answers: 4, 107\] Great!

And number 4? (865 positive tests, \_\_ in the first 30 days).

If I want to check my answers, I can go in the Files pane, click beside the up arrow to go into the parent directory, go down into solutions, and open the solutions for our first assignment.
:::



